Purpose : Revisiting the basic Python concepts and summarizing the core concepts 
Time : 43 hours 
Resource: w3schools 


Naming variables
-Always make your variables meangful

Topics Explored 
-Comments       -Variables        -Data Types
-Numbers        -Casing           -Strings 
-Booleans       -Operators        -Lists
-Tuples         -Sets             -Dictionaries     -Arrays
-If..Else       -While Loops      -For Loops 
-Functions      -Lambda           -Scope            -Modules
-Classes/Objects                  -Inheritance      -Iterators       
-Dates          -Math              -JSON             -RegEx
-PIP
-Try..Except    -User Input         -String Format
-OOP : Procedural Programming

SCOPE
-A variable is only available from inside the region it is created.
-A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.
-If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.
-Avoid using global variables

MODULES 
-Consider a module to be the same as a code library.
-A file containing a set of functions you want to include in your application.
-When using a function from a module, use the syntax: module_name.function_name.

LAMBDA
-small anonymous function
-Many arguments but one expression 
-lambda arguments :expression 
-e.g x = lambda a:a +10, x= lambdar a,b : a*b
- better used when you use as an anonymous function inside another function 

Example 1
-def myfunc(n):
  return lambda a : a * n
mydoubler = myfunc(2)


ARRAYS 
-Arrays : list of variables that can hold more than one value at a time 
-Can use lists as arrays 
-Need to import NumPy to work with arrays in python
-cars = ["Ford", "Volvo", "BMW"]
-cars[0] is the first array item 
-Looping through arrays 
  for x in cars:
    print(x)  #remember identation matters 
-Array methods : append(), clear(), copy(), count(),extend(), index(), insert(), pop(), remove(), reverse(), sort() 

CLASSES/OBJECTS
-Almost everything is an object: has properties and methods 
-A class is an object constructor, or a blueprint for creating object 
-Class 
  class MyClass: 
    x=5
  p1=MyClass()   # creating an object named p1 
  print(p1.x)
-All classes have a built in function: __init__() which is executed when the class is initiated 
-The init function is used to assign values to object properties or other operations necessary to do when the object is created 
  class Person:    #creating a class named Person
    def __init__(self, name, age): #use init function to assign values such as name and age 
      self.name = name
      self.age = age

   p1 = Person("John", 36)
Note: The __init__() function is called automatically every time the class is being used to create a new object.
-The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.
-The self parameter can be named anything but has to be the first parameter.
-Class definitions can not be empty 

INHERITANCE
-A class inherits all the methods and properties from anotehr class 
-Parent/Base class - The class being inherited from 
-Child/Derived Class - The class inherting from another clss 
-Any class  can be a parent class so syntac is the same
  class Student(Person):  #student is the Parent & Person is the child
    pass 
-When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.Instead teh new function will override the parent function.
-Python also has a super() function that will make the child class inherit all the methods and properties from its parent:
   class Student(Person):
     def __init__(self, fname, lname):
     super().__init__(fname, lname)
     
ITERATORS
-An iterator is an object that contains a countable number of values
-You can transverse through all the values 
-An iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__()
-Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.
-All classes should have the function __init__(), which allows tyou to do some initializing when the object is being created 
-The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.
-The __next__() method also allows you to do operations, and must return the next item in the sequence.
-To prevent the iteration to go on forever, we can use the StopIteration statement.
-The following code stops after 20 iterations 
class MyNumbers:
  def __iter__(self):
    self.a = 1    #initializes variabl 
    return self   #iter should always return itself 

  def __next__(self):
    if self.a <= 20:   
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration  #prevents the iteration from going on forever

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)
  
DATETIME
-Import module named datetime to work with dates as date objects.
-To create a date, we can use the datetime() class (constructor) of the datetime module.
-The datetime() class requires three parameters to create a date: year, month, day.
-The datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone).
-The method is called strftime(), and takes one parameter, format, to specify the format of the returned string:It can be the following : weekday,month,minute,second and the format 


JSON 
-A syntax for storing and exchanging data 
-A text written with JavaScript object Notation 
-Python has a built-in package called json, which can be used to work with JSON data.
-Can covert JSON to Python and vice versa and the result will be a python dictionary 
import json
x =  '{ "name":"John", "age":30, "city":"New York"}'       #some JSON
y = json.loads(x)                                          #parse x:
print(y["age"])                                            #the result is a Python dictionary:


REGEX:REGULAR EXPRESSION 
-Python has a built-in package called re, which can be used to work with Regular Expressions.
-Import the re module:

PIP
-Package manager for python packages or modules.
-A package contains all the files you need for a module.
-Modules are Python code libraries you can include in your project
-Use the list command to list all the packages installed on your system:


TRY.....EXCEPT
-The try block lets you test a block of code for errors.
-The except block lets you handle the error.
-The else block lets you execute code when there is no error.
-The finally block lets you execute code, regardless of the result of the try- and except blocks.
-You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:
try:
  f = open("demofile.txt")
  try:
    f.write("Lorum Ipsum")
  except:
    print("Something went wrong when writing to the file")  #if the try produces an error then this line prints 
  finally:
    f.close()  #this line executes whether or not the try lien is executed 
except:
  print("Something went wrong when opening the file")
-As a Python developer you can choose to throw an exception if a condition occurs.
-To throw (or raise) an exception, use the raise keyword.
-if not type(x) is int:
  raise TypeError("Only integers are allowed")


USER INPUT 
-Example
  username = input("Enter username:")
  print("Username is: " + username)
  
  
STRING FORMATTING
-The format() method allows you to format selected parts of a string.
-Sometimes there are parts of a text that you do not control, maybe they come from a database, or user input?
-To control such values, add placeholders (curly brackets {}) in the text, and run the values through the format() method.


PROCEDURAL PROGRAMMING 
-Breaking a bigger task into a smaller task 
-Relies on the concept of classes and objects
-Used to structure a software program into simple, reusable pieces of code blueprints (usually called classes)
-A class is an abstract blueprint used to create more specific, concrete objects
-Classes often represent broad categories, like Car or Dog that share attributes
-For example, our Car class may have a method repaint that changes the color attribute of our car
	-This function is only helpful to objects of type Car, so we declare it within the Car class thus making it a method

The four pillars of object oriented programming are:
-Inheritance: child classes inherit data and behaviors from parent class
-Encapsulation: containing information in an object, exposing only selected information
-Abstraction: only exposing high level public methods for accessing an object
-Polymorphism: many methods can do the same task


  





